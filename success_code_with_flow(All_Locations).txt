import os
import pandas as pd
import re

def combine_rtu_sheets_by_location(src_folder):
    location_data = {}
    outside_air_data = {}

    rtu_pattern = re.compile(r"RTU\s*\d+")
    outside_air_pattern = re.compile(r"Outside\s+Air|OSA|Weather", re.IGNORECASE)

    for filename in os.listdir(src_folder):
        if filename.endswith(".xlsx") and "LOC-US" in filename:
            location_code = filename.split('-')[2]
            file_path = os.path.join(src_folder, filename)
            print(f"Processing file: {file_path}")
            try:
                xls = pd.ExcelFile(file_path)
            except Exception as e:
                print(f"Error reading file {file_path}: {e}")
                continue
            
            for sheet_name in xls.sheet_names:
                match_rtu = rtu_pattern.search(sheet_name)
                match_outside_air = outside_air_pattern.search(sheet_name)
                
                if match_rtu:
                    rtu_number = match_rtu.group()
                    print(f"Found RTU sheet: {sheet_name} in file: {file_path}")
                    try:
                        df = pd.read_excel(xls, sheet_name=sheet_name)
                    except Exception as e:
                        print(f"Error reading sheet {sheet_name} in file {file_path}: {e}")
                        continue
                    
                    if location_code not in location_data:
                        location_data[location_code] = {}
                    if rtu_number not in location_data[location_code]:
                        location_data[location_code][rtu_number] = []
                    
                    location_data[location_code][rtu_number].append((df, sheet_name, filename))
                
                if match_outside_air:
                    print(f"Found Outside Air in sheet: {sheet_name} in file: {file_path}")
                    try:
                        df = pd.read_excel(xls, sheet_name=sheet_name)
                    except Exception as e:
                        print(f"Error reading sheet {sheet_name} in file {file_path}: {e}")
                        continue
                    
                    if location_code not in outside_air_data:
                        outside_air_data[location_code] = []
                    
                    outside_air_data[location_code].append((df, sheet_name, filename))

    return location_data, outside_air_data

def save_combined_sheets(location_data, outside_air_data, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    for location_code, rtu_data in location_data.items():
        for rtu_number, dfs in rtu_data.items():
            output_file = os.path.join(output_folder, f"{location_code}_{rtu_number.replace(' ', '_')}.xlsx")
            with pd.ExcelWriter(output_file) as writer:
                for df, sheet_name, filename in dfs:
                    truncated_sheet_name = sheet_name[:31]
                    df.to_excel(writer, sheet_name=truncated_sheet_name, index=False)
                    print(f"Added RTU sheet: {sheet_name} from file: {filename} to {output_file}")
                
                if location_code in outside_air_data:
                    for df, sheet_name, filename in outside_air_data[location_code]:
                        truncated_sheet_name = sheet_name[:31]
                        df.to_excel(writer, sheet_name=truncated_sheet_name, index=False)
                        print(f"Added Outside Air sheet: {sheet_name} from file: {filename} to {output_file}")

        if location_code in outside_air_data and location_code not in location_data:
            output_file = os.path.join(output_folder, f"{location_code}_Outside_Air.xlsx")
            with pd.ExcelWriter(output_file) as writer:
                for df, sheet_name, filename in outside_air_data[location_code]:
                    truncated_sheet_name = sheet_name[:31]
                    df.to_excel(writer, sheet_name=truncated_sheet_name, index=False)
                    print(f"Added Outside Air sheet: {sheet_name} from file: {filename} to {output_file}")

def process_excel_file(file_path, flow_data_path):
    flow_data = pd.read_excel(flow_data_path)
    
    xls = pd.ExcelFile(file_path)
    num_sheets = len(xls.sheet_names)

    if num_sheets != 3:
        print(f"Error: The file '{file_path}' does not contain exactly 3 sheets.")
        return None
    else:
        sheet_names = xls.sheet_names
        sheet_fa = xls.parse(sheet_names[0])
        sheet_te = xls.parse(sheet_names[1])
        sheet_en = xls.parse(sheet_names[2])
        file_name = os.path.basename(file_path)
        location_name, rtu_name = file_name.replace('.xlsx', '').split('_')[:2]

        sheet_fa['Timestamp'] = pd.to_datetime(sheet_fa['Timestamp'])
        sheet_te['Timestamp'] = pd.to_datetime(sheet_te['Timestamp'])
        sheet_en['Timestamp'] = pd.to_datetime(sheet_en['Timestamp'])

        merged_df = pd.merge_asof(sheet_fa, sheet_te, on='Timestamp', tolerance=pd.Timedelta('1min'), direction='nearest', suffixes=('_fa', '_te'))
        merged_df = pd.merge_asof(merged_df, sheet_en, on='Timestamp', tolerance=pd.Timedelta('1min'), direction='nearest', suffixes=('', '_en'))

        columns_to_delete = ["kW", "kVAR", "kVA", "van", "vbn", "vcn", "Peak kW", "Demand kW", "Power Factor", "Validity", "Master SP", "DeltaT", "Cool SP", "Heat SP", "Strategy", "State Descrip", "Run Time", "CO2", "Fan Mode", "Fan Desc"]
        merged_df.drop(columns=[col for col in columns_to_delete if col in merged_df.columns], inplace=True)

        ordered_columns = ['Timestamp', '°F', 'Zone', 'Supply', 'kWh'] + [col for col in merged_df.columns if col not in ['Timestamp', '°F', 'Zone', 'Supply', 'kWh']]
        merged_df = merged_df[ordered_columns]

        merged_df.dropna(subset=['°F', 'Zone', 'Supply', 'kWh'], inplace=True)

        merged_df['TS diff'] = merged_df['Timestamp'].diff().fillna(pd.Timedelta(seconds=0)).dt.total_seconds()
        merged_df['FA DT'] = merged_df['°F'] - merged_df['Supply']
        merged_df['Return'] = merged_df.apply(lambda row: row['Zone'] - 2 if row['Zone'] > row['°F'] else row['Zone'] + 2, axis=1)
        merged_df['RA DT'] = merged_df['Return'] - merged_df['Supply']
        merged_df['Mode'] = merged_df['RA DT'].apply(lambda x: 'Heating' if x < 0 else 'Cooling')
        merged_df['Wh'] = 1000 * merged_df['kWh'].diff().fillna(0)

        flow_value = flow_data[(flow_data['Location Name'] == location_name) & (flow_data['RTU name'] == rtu_name)]['Flow']
        flow = flow_value.iloc[0] if not flow_value.empty else 9600

        FA_percent = 0.2
        HtGL = 2
        Cp = 0.24
        Den = 0.0765

        merged_df['FACool'] = FA_percent * flow * Den * Cp * merged_df['FA DT'] * 15
        merged_df['RACool'] = (1 - FA_percent) * flow * Den * Cp * merged_df['RA DT'] * 15
        merged_df['TotCool'] = merged_df['FACool'] + merged_df['RACool']

        CE = merged_df[(merged_df['Mode'] == 'Cooling') & (merged_df['TS diff'] < 960) & (merged_df['Wh'] > 0)]['TotCool'].sum()
        HE = merged_df[(merged_df['Mode'] == 'Heating') & (merged_df['TS diff'] < 960) & (merged_df['Wh'] > 0)]['TotCool'].sum()

        PWH = merged_df[(merged_df['Mode'] == 'Heating') & (merged_df['TS diff'] < 960) & (merged_df['Wh'] > 0)]['Wh'].sum()
        PWC = merged_df[(merged_df['Mode'] == 'Cooling') & (merged_df['TS diff'] < 960) & (merged_df['Wh'] > 0)]['Wh'].sum()

        SEER = CE / PWC if PWC != 0 else 0
        HSPF = HE / PWH if PWH != 0 else 0

        output_file = f'Cleaned_Merged_RTU_Data_{file_name}'
        merged_df.to_excel(output_file, index=False)

        return location_name, rtu_name, SEER, HSPF, flow

def main(src_folder, flow_data_path):
    output_folder = os.path.join(src_folder, 'combined_sheets')
    
    location_data, outside_air_data = combine_rtu_sheets_by_location(src_folder)
    save_combined_sheets(location_data, outside_air_data, output_folder)
    
    results = []
    for file_name in os.listdir(output_folder):
        if file_name.endswith('.xlsx'):
            file_path = os.path.join(output_folder, file_name)
            result = process_excel_file(file_path, flow_data_path)
            if result is not None:
                results.append(result)
    
    results_df = pd.DataFrame(results, columns=['Location Name', 'RTU Name', 'SEER', 'HSPF', 'Flow'])
    results_file_path = os.path.join(src_folder, 'kpi_results1.xlsx')
    results_df.to_excel(results_file_path, index=False)
    print(f"KPI results saved to: {results_file_path}")

if __name__ == "__main__":
    src_folder = input("Enter the path to the source folder: ").strip()
    flow_data_path = input("Enter the path to the flow data Excel file: ").strip()
    main(src_folder, flow_data_path)
